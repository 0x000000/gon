{"name":"Gon","body":"# Gon gem â€” get your Rails variables in your js\r\n\r\n![Gon. You should try this. If you look closer - you will see an elephant.](https://github.com/gazay/gon/raw/master/doc/logo_small.png)\r\n\r\n\r\n### Build Status ![http://travis-ci.org/gazay/gon](https://secure.travis-ci.org/gazay/gon.png)\r\n\r\nIf you need to send some data to your js files and you don't want to do this with long way through views and parsing - use this force!\r\n\r\nNow with [Jbuilder](https://github.com/rails/jbuilder) and [Rabl](https://github.com/nesquena/rabl) support!\r\n\r\nFor Sinatra available [gon-sinatra](https://github.com/gazay/gon-sinatra).\r\n\r\nFor .Net MVC available port [NGon](https://github.com/brooklynDev/NGon).\r\n\r\n## An example of typical use\r\n\r\n### Very good and detailed example and reasons to use is considered in [railscast](http://railscasts.com/episodes/324-passing-data-to-javascript) by Ryan Bates\r\n\r\nWhen you need to send some start data from your controller to your js\r\nyou might be doing something like this:\r\n\r\n  1. Write this data in controller(presenter/model) to some variable\r\n  2. In view for this action you put this variable to some objects by data\r\n     attributes, or write js right in view\r\n  3. Then there can be two ways in js:\r\n    + if you previously wrote data in data\r\n     attributes - you should parse this attributes and write data to some\r\n  js variable.\r\n    + if you wrote js right in view (many frontenders would shame you for\r\n  that) - you just use data from this js - OK.\r\n  4. You can use your data in your js\r\n\r\nAnd everytime when you need to send some data from action to js you do this.\r\n\r\nWith gon you configure it firstly - just put in layout one tag, and add\r\ngem line to your Gemfile and do the following:\r\n\r\n  1. Write variables by\r\n\r\n    ``` ruby\r\n    gon.variable_name = variable_value\r\n    ```\r\n\r\n  2. In your js you get this by\r\n\r\n    ``` js\r\n    gon.variable_name\r\n    ```\r\n\r\n  3. profit?\r\n\r\n## Usage\r\n\r\n`app/views/layouts/application.html.erb`\r\n\r\n``` erb\r\n<head>\r\n  <title>some title</title>\r\n  <%= include_gon %>\r\n  <!-- include your action js code -->\r\n  ...\r\n```\r\n\r\nTo camelize your variables in js you can use:\r\n\r\n``` erb\r\n<head>\r\n  <title>some title</title>\r\n  <%= include_gon(:camel_case => true) %>\r\n  <!-- include your action js code with camelized variables -->\r\n  ...\r\n```\r\n\r\nYou can change the namespace of the variables:\r\n\r\n``` erb\r\n<head>\r\n  <title>some title</title>\r\n  <%= include_gon(:namespace => 'serverExports') %>\r\n  <!-- include your action js code with 'serverExports' namespace -->\r\n  ...\r\n```\r\n\r\nYou put something like this in the action of your controller:\r\n\r\n``` ruby\r\n@your_int = 123\r\n@your_array = [1,2]\r\n@your_hash = {'a' => 1, 'b' => 2}\r\ngon.your_int = @your_int\r\ngon.your_other_int = 345 + gon.your_int\r\ngon.your_array = @your_array\r\ngon.your_array << gon.your_int\r\ngon.your_hash = @your_hash\r\n\r\ngon.all_variables # > {:your_int => 123, :your_other_int => 468, :your_array => [1, 2, 123], :your_hash => {'a' => 1, 'b' => 2}}\r\ngon.your_array # > [1, 2, 123]\r\n\r\ngon.clear # gon.all_variables now is {}\r\n```\r\n\r\nAccess the varaibles from your JavaScript file:\r\n\r\n``` js\r\nalert(gon.your_int)\r\nalert(gon.your_other_int)\r\nalert(gon.your_array)\r\nalert(gon.your_hash)\r\n```\r\n\r\nWith camelize:\r\n\r\n``` js\r\nalert(gon.yourInt)\r\nalert(gon.yourOtherInt)\r\nalert(gon.yourArray)\r\nalert(gon.yourHash)\r\n```\r\n\r\nWith custom namespace and camelize:\r\n\r\n``` js\r\nalert(customNamespace.yourInt)\r\nalert(customNamespace.yourOtherInt)\r\nalert(customNamespace.yourArray)\r\nalert(customNamespace.yourHash)\r\n```\r\n\r\n## Usage with Rabl\r\n\r\nNow you can write your variables assign logic to templates with [Rabl](https://github.com/nesquena/rabl).\r\nThe way of writing Rabl templates is very clearly described in their repo.\r\n\r\nAdd Rabl to your Gemfile before requiring gon - because gon checks Rabl constant\r\n\r\n  `Gemfile`\r\n\r\n  ``` ruby\r\n  gem 'rabl'\r\n  ...\r\n  gem 'gon'\r\n  ```\r\n\r\nProfit of using Rabl with gon:\r\n\r\n  1. You can clean your controllers now!\r\n  2. Work with database objects and collections clearly and easyly\r\n  3. All power of Rabl\r\n  4. You can still be lazy and don't use common way to transfer data in js\r\n  5. And so on\r\n\r\nFor using gon with Rabl you need to create new Rabl template and map gon\r\nto it.\r\nFor example you have model Post with attributes :title and :body.\r\nYou want to get all your posts in your js as an Array.\r\nThat's what you need to do:\r\n\r\n  1. Create Rabl template. You can choose spepicific directory but better\r\n     use default directory for action.\r\n\r\n    `app/views/posts/index.json.rabl`\r\n\r\n    ``` rabl\r\n    collection @posts => 'posts'\r\n    attributes :id, :title, :body\r\n    ```\r\n\r\n  2. If you create template in default directory for action, you just write in this action:\r\n\r\n    `app/controllers/posts_controller.rb#index`\r\n\r\n    ``` ruby\r\n    def index\r\n      # some controller logic\r\n      @posts = Post.all # Rabl works with instance variables of controller\r\n\r\n      gon.rabl\r\n      # some controller logic\r\n    end\r\n    ```\r\n\r\n     But if you choose some specific category - you need to map this template to gon.\r\n\r\n    `app/controllers/posts_controller.rb#index`\r\n\r\n    ``` ruby\r\n    def index\r\n      # some controller logic\r\n      @posts = Post.all # Rabl works with instance variables of controller\r\n\r\n      gon.rabl :template => 'app/goners/posts/index.rabl'\r\n      # some controller logic\r\n    end\r\n    ```\r\n\r\n    Thats it! Now you will get in your js gon.posts variable which is Array of\r\n    post objects with attributes :id, :title and :body.\r\n\r\nIn javascript file for view of this action write call to your variable:\r\n\r\n``` js\r\nalert(gon.posts)\r\nalert(gon.posts[0])\r\nalert(gon.posts[0].post.body)\r\n```\r\n\r\nP.s. If you didn't put include_gon tag in your html head area - it\r\nwouldn't work. You can read about this in common usage above.\r\n\r\n### Some tips of usage Rabl with gon:\r\n\r\nIf you don't use alias in Rabl template:\r\n\r\n``` rabl\r\ncollection @posts\r\n....\r\n```\r\n\r\ninstead of using that:\r\n\r\n``` rabl\r\ncollection @posts => 'alias'\r\n....\r\n```\r\n\r\nRabl will return you an array and gon by default will put it to variable\r\ngon.rabl\r\n\r\nTwo ways how you can change it - using aliases or you can add alias to\r\ngon mapping method:\r\n\r\n``` ruby\r\n# your controller stuff here\r\n\r\ngon.rabl :as => 'alias'\r\n```\r\n\r\n## Usage with Jbuilder\r\n\r\nUse gon with [Jbuilder](https://github.com/rails/jbuilder) as with [Rabl](https://guthub.com/nesquena/rabl):\r\n\r\nJbuilder works now only on Ruby 1.9+, so Gon support for Jbuilder works on 1.9+ only\r\n\r\n  0. Add jbuilder to your Gemfile (because of it depends on\r\n     ActiveSuppurt '~> 3.0.0')\r\n\r\n    `Gemfile`\r\n\r\n    ``` ruby\r\n    gem 'jbuilder'\r\n    ```\r\n\r\n  1. Create Jbuilder template.\r\n\r\n    `app/views/posts/index.json.jbuilder`\r\n\r\n    ``` jbuilder\r\n    json.posts @posts, :id, :title, :body\r\n    ```\r\n\r\n  2. In your controller you should just call 'gon.jbuilder' - if your template in\r\n     default directory for action. In the other case - you still can use :template option.\r\n\r\n    ``` ruby\r\n    def index\r\n      # some controller logic\r\n      @posts = Post.all\r\n\r\n      gon.jbuilder 'app/views/posts/index.json.jbuilder'\r\n      # some controller logic\r\n    end\r\n    ```\r\n\r\nIn javascript file for view of this action write call to your variable:\r\n\r\nNow you can use partials in jbuilder:\r\n\r\n`app/views/posts/index.json.jbuilder`\r\n\r\n``` jbuilder\r\njson.partial! 'app/views/posts/_part.json.jbuilder', :comments => @posts[0].comments\r\n```\r\n\r\n`app/views/posts/_part.json.jbuilder`\r\n\r\n``` jbuilder\r\njson.comments comments.map{ |it| 'comment#' + it.id }\r\n```\r\n\r\n``` js\r\nalert(gon.posts)\r\nalert(gon.posts[0])\r\nalert(gon.posts[0].post.body)\r\nalert(gon.comments)\r\nalert(gon.comments[0])\r\n```\r\n\r\nP.s. If you didn't put include_gon tag in your html head area - it\r\nwouldn't work. You can read about this in common usage above.\r\n\r\n## Installation\r\n\r\nPuts this line into `Gemfile` then run `$ bundle`:\r\n\r\n``` ruby\r\ngem 'gon', '2.2.2'\r\n```\r\n\r\nOr if you are old-school Rails 2 developer put this into `config/environment.rb` and run `$ rake gems:install`:\r\n\r\n``` ruby\r\nconfig.gem 'gon', :version => '2.2.2'\r\n```\r\n\r\nOr manually install gon gem: `$ gem install gon`\r\n\r\n## Contributors\r\n\r\n* @gazay\r\n\r\nSpecial thanks to @brainopia, @kossnocorp and @ai.\r\n\r\n## License\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2011-2012 gazay\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","tagline":"Your Rails variables in your JS","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}